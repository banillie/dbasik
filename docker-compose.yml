# from tutorial at https://londonappdeveloper.com/deploying-django-with-docker-compose/
version: "3.9"

services:
  redis:
    image: redis:6-alpine
  app:
    build:
      context: .
    ports:
      - 8000:8000
    volumes:
      - ./dbasik:/app # creates a volume which maps the . directory in our project to /app in the container - allowing us to sync our changes
      - static-data:/vol/web
    environment:
      - SECRET_KEY=devsecretkey
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKED=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=config.settings_new
      - ALLOWED_HOSTS=100.64.1.3,localhost
    command: > # POST-TUTORIAL-NOTE: does this override the CMD line in the Dockerfile? Would seem right.
      sh -c "python manage.py wait_for_db &&
            python manage.py migrate &&
            python manage.py runserver 0.0.0.0:8000"
    stdin_open: true
    tty: true
    depends_on:
      - db
      - redis
  db:
    image: postgres:13-alpine
    volumes:
      - data-volume:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=devdb
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=changeme
  celery_worker: # we just use the Django container for this
    restart: always
    build:
      context: .
    image: dbasik_celery_worker
    command: celery -A config worker -l INFO
    volumes:
      - ./dbasik:/app # creates a volume which maps the . directory in our project to /app in the container - allowing us to sync our changes
      - static-data:/vol/web
    environment:
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKED=redis://redis:6379/0
    depends_on:
      - redis
      - db
      - app
volumes:
  data-volume:
  static-data:

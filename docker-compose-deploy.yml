version: "3.9"

services:
  redis:
    image: redis:6-alpine
  app:
    build:
      context: .
    restart: always
    volumes:
      - static-data:/vol/web
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKED=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=config.settings_new
    depends_on:
      - db
      - redis
  celery_worker: # we just use the Django container for this
    restart: always
    build:
      context: .
    image: dbasik_celery_worker
    command: celery -A config worker -l INFO
    volumes:
      - ./dbasik:/app # creates a volume which maps the . directory in our project to /app in the container - allowing us to sync our changes
      - ./data/web:/vol/web
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKED=redis://redis:6379/0
    depends_on:
      - redis
      - db
      - app
  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
  proxy:
    build:
      context: ./proxy
    restart: always
    depends_on:
      - app
    ports:
      - 80:8000
    volumes:
      - static-data:/vol/static
volumes:
  postgres-data:
  static-data: